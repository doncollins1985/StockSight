#!/usr/bin/env python
#================================
#  main.py
#================================
"""
Orchestrates the entire pipeline:
    1) Fetch stock data (stock.py)
    2) Merge sentiment & create sequences (data.py)
    3) Train the model (train.py)
    4) Evaluate the model (evaluate.py)

Usage:
    python main.py fetch --ticker ^GSPC --start 2020-01-01 --end 2021-01-01 ...
    python main.py data-setup --config config.json
    python main.py train --config config.json
    python main.py evaluate --config config.json
"""

import argparse
import logging
import sys
import os

# We import these so we can call their "main" or their key functions
import scripts.stock as stock          # stock.py
import scripts.data as data            # data.py
import scripts.train as train          # train.py
import scripts.evaluate as evaluate    # evaluate.py

from scripts.utils import load_config

logging.basicConfig(
    level=logging.WARN,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

def main():
    parser = argparse.ArgumentParser(
        description="Main script that can fetch data, run data-setup, train, and evaluate."
    )
    subparsers = parser.add_subparsers(dest='command', help='Sub-commands')

    #-------------------------#
    # 1) FETCH sub-command
    #-------------------------#
    fetch_parser = subparsers.add_parser('fetch', help='Fetch stock data using yfinance + TA-Lib')
    fetch_parser.add_argument("-s", "--start", type=str, default="1985-01-01",
                              help="Start date (YYYY-MM-DD). Default=1985-01-01")
    fetch_parser.add_argument("-i", "--interval", type=str, default="1d",
                              help="Data interval (e.g., 1d, 15m). Default=1d")
    fetch_parser.add_argument("-c", "--config", type=str, default="config.json",
                              help="Path to config file. Default=config.json")
    fetch_parser.add_argument("-e", "--end", type=str, default=None,
                              help="End date (YYYY-MM-DD). Default=today")
    fetch_parser.add_argument("-t", "--ticker", type=str, default="^GSPC",
                              help="Ticker symbol (e.g. ^GSPC). Default=^GSPC")
    fetch_parser.add_argument("-o", "--output", type=str, default=None,
                              help="Output CSV path. Default=data/stocks/<ticker>.csv")

    #-------------------------#
    # 2) DATA-SETUP sub-command
    #-------------------------#
    data_setup_parser = subparsers.add_parser('data-setup', help='Merge sentiment & create sequences')
    data_setup_parser.add_argument("-c", "--config", type=str, default="config.json",
                                   help="Path to the data config file.")

    #-------------------------#
    # 3) TRAIN sub-command
    #-------------------------#
    train_parser = subparsers.add_parser('train', help='Train the model')
    train_parser.add_argument("-c", "--config", type=str, default="config.json",
                              help="Path to the training config file.")

    #-------------------------#
    # 4) EVALUATE sub-command
    #-------------------------#
    eval_parser = subparsers.add_parser('evaluate', help='Evaluate the model')
    eval_parser.add_argument("-c", "--config", type=str, default="config.json",
                             help="Path to the evaluation config file.")

    args = parser.parse_args()

    if args.command is None:
        parser.print_help()
        sys.exit(1)

    if args.command == 'fetch':
        # Reuse the logic from stock.py's main but pass in arguments manually
        # Instead of rewriting logic, we directly call stock.fetch_stock_data 
        # or we can call stock.main() with sys.argv. We'll do direct call:
        config = load_config(args.config)

        start_date = args.start
        interval = args.interval
        end_date = args.end
        ticker = args.ticker
        # If user didn't provide output, auto-construct from config or default
        default_dir = config.get('data_dir', 'data')
        os.makedirs(default_dir, exist_ok=True)
        output_path = args.output if args.output else config['stock_file']

        success = stock.fetch_stock_data(ticker, start_date, end_date, interval, output_path)
        if success:
            logging.info("Data fetch & processing completed successfully.")
        else:
            logging.error("Failed to fetch/prepare data.")
        sys.exit(0)

    elif args.command == 'data-setup':
        # Let the data.py's main handle it
        data.main(args.config)
        sys.exit(0)

    elif args.command == 'train':
        # Let train.py handle it
        train.train_model(args.config)
        sys.exit(0)

    elif args.command == 'evaluate':
        # Let evaluate.py handle it
        evaluate.main(["--config", args.config])
        sys.exit(0)


if __name__ == "__main__":
    main()

